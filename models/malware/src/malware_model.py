import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, roc_auc_score
import joblib
from pathlib import Path
import os

# -----------------------------------------------------
# Base paths
# -----------------------------------------------------
BASE_DIR = Path(__file__).parent.resolve()
DATA_DIR = BASE_DIR.parent / "data"
MODELS_DIR = BASE_DIR.parent / "models"
MODELS_DIR.mkdir(parents=True, exist_ok=True)

# -----------------------------------------------------
# Debug info
# -----------------------------------------------------
print("--- DEBUGGING INFO ---")
print(f"Script directory: {BASE_DIR}")
print(f"Looking for CSV in: {DATA_DIR}")
if DATA_DIR.exists():
    for f in os.listdir(DATA_DIR):
        print(f"- {f}")
else:
    print(f"DATA_DIR '{DATA_DIR}' does not exist!")
print("--- END DEBUG INFO ---\n")

# -----------------------------------------------------
# Load dataset
# -----------------------------------------------------
csv_files = list(DATA_DIR.glob("*.csv"))
if not csv_files:
    raise FileNotFoundError(f"No CSV file found in {DATA_DIR}")
data_file = csv_files[0]
data = pd.read_csv(data_file, engine='python', on_bad_lines='skip')
data.columns = [col.strip() for col in data.columns]

# Drop unnecessary unnamed columns
data = data.loc[:, ~data.columns.str.contains('^Unnamed')]

# -----------------------------------------------------
# Prepare target
# -----------------------------------------------------
TARGET_COL = "classification"
if TARGET_COL not in data.columns:
    raise ValueError(f"Dataset must have a '{TARGET_COL}' column")

# Map string labels to integers
label_mapping = {"benign": 0, "malware": 1}
data[TARGET_COL] = data[TARGET_COL].map(label_mapping)

# Drop rows with missing or invalid labels
data = data.dropna(subset=[TARGET_COL])
data[TARGET_COL] = data[TARGET_COL].astype(int)

# -----------------------------------------------------
# Features
# -----------------------------------------------------
# Exclude non-numeric columns for training
feature_cols = [col for col in data.columns if col != TARGET_COL and data[col].dtype in [np.int64, np.float64]]

X = data[feature_cols].fillna(0)
y = data[TARGET_COL]

# -----------------------------------------------------
# Train/Test split
# -----------------------------------------------------
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# -----------------------------------------------------
# Train Random Forest
# -----------------------------------------------------
model = RandomForestClassifier(n_estimators=150, max_depth=12, random_state=42, n_jobs=-1)
model.fit(X_train, y_train)

# Evaluate
preds = model.predict(X_test)
probs = model.predict_proba(X_test)
if probs.shape[1] == 1:
    probs = np.hstack([1 - probs, probs])

print("\nClassification Report:")
print(classification_report(y_test, preds))
print("ROC-AUC:", roc_auc_score(y_test, probs[:, 1]))

# -----------------------------------------------------
# Save model and features
# -----------------------------------------------------
model_file = MODELS_DIR / "malware_rf_model.pkl"
features_file = MODELS_DIR / "malware_features.pkl"

joblib.dump(model, model_file)
joblib.dump(feature_cols, features_file)
print(f"\nModel saved to: {model_file}")
print(f"Feature list saved to: {features_file}")

# -----------------------------------------------------
# Load model for analysis
# -----------------------------------------------------
ANALYSIS_MODEL = joblib.load(model_file)
ANALYSIS_FEATURES = joblib.load(features_file)

# -----------------------------------------------------
# Analyze new sample input
# -----------------------------------------------------
def analyze_input(row):
    feat_array = np.array([row.get(f, 0) for f in ANALYSIS_FEATURES]).reshape(1, -1)
    pred_prob = ANALYSIS_MODEL.predict_proba(feat_array)[0][1]
    pred_label = int(pred_prob >= 0.5)

    output = {
        "input_features": {f: row.get(f, 0) for f in ANALYSIS_FEATURES},
        "model_prediction": "malware" if pred_label else "benign",
        "prediction_confidence": round(float(pred_prob), 4)
    }
    return output

# -----------------------------------------------------
# Example test cases
# -----------------------------------------------------
if __name__ == "__main__":
    test_cases = [
        {
            "name": "Test Sample 1 (Malware)",
            "input": {
                "millisecond": 0, "state": 0, "usage_counter": 0, "prio": 3069378560,
                "static_prio": 14274, "normal_prio": 0, "policy": 0, "vm_pgoff": 0,
                "vm_truncate_count": 13173, "task_size": 0, "cached_hole_size": 0,
                "free_area_cache": 24, "mm_users": 724, "map_count": 6850, "hiwater_rss": 0,
                "total_vm": 150, "shared_vm": 120, "exec_vm": 124, "reserved_vm": 210,
                "nr_ptes": 0, "end_data": 120, "last_interval": 3473, "nvcsw": 341974,
                "nivcsw": 0, "min_flt": 0, "maj_flt": 120, "fs_excl_counter": 0, "lock": 3204448256,
                "utime": 380690, "stime": 4, "gtime": 0, "cgtime": 0, "signal_nvcsw": 0
            }
        },
        {
            "name": "Test Sample 2 (Benign)",
            "input": {
                "millisecond": 1, "state": 0, "usage_counter": 0, "prio": 1000,
                "static_prio": 10, "normal_prio": 0, "policy": 0, "vm_pgoff": 0,
                "vm_truncate_count": 1000, "task_size": 0, "cached_hole_size": 0,
                "free_area_cache": 5, "mm_users": 50, "map_count": 500, "hiwater_rss": 0,
                "total_vm": 10, "shared_vm": 10, "exec_vm": 10, "reserved_vm": 10,
                "nr_ptes": 0, "end_data": 10, "last_interval": 100, "nvcsw": 1000,
                "nivcsw": 0, "min_flt": 0, "maj_flt": 0, "fs_excl_counter": 0, "lock": 0,
                "utime": 10, "stime": 1, "gtime": 0, "cgtime": 0, "signal_nvcsw": 0
            }
        }
    ]

    print("\n--- Running Test Cases ---\n")
    for idx, case in enumerate(test_cases, start=1):
        result = analyze_input(case["input"])
        status = "⚠️ Malware Detected" if result["model_prediction"] == "malware" else "✅ Benign"
        print(f"Test Case {idx}: {case['name']}")
        print(f"Prediction: {result['model_prediction'].upper()} ({status})")
        print(f"Confidence: {result['prediction_confidence']}")
        print(f"Input Features: {result['input_features']}")
        print("-" * 80)
